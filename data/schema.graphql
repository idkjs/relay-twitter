type LikeTweetPayload {
  tweetEdge: TweetEdge
}

type Mutation {
  UserChangePassword(input: UserChangePasswordInput!): UserChangePasswordPayload
  UserLoginWithEmail(input: UserLoginWithEmailInput!): UserLoginWithEmailPayload
  UserRegisterWithEmail(
    input: UserRegisterWithEmailInput!
  ): UserRegisterWithEmailPayload

  """
  Used to create a tweet
  """
  TweetCreate(input: TweetCreateInput!): TweetCreatePayload

  """
  Used to like and retweet a tweet
  """
  TweetUpdate(input: TweetUpdateInput!): TweetUpdatePayload
}

type NewTweetPayload {
  tweetEdge: TweetEdge
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfoExtended {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}
"""
The root of all... queries
"""
type Query {
  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
  me: User
  user(id: ID!): User
  users(
    after: String
    first: Int
    before: String
    last: Int
    search: String
  ): UserConnection
  tweet(id: ID!): Tweet
  tweets(
    after: String
    first: Int
    before: String
    last: Int
    authorId: ID
  ): TweetConnection
}
type RetweetTweetPayload {
  tweetEdge: TweetEdge
}
type Subscription {
  UserAdded: UserAddedPayload
  NewTweet: NewTweetPayload
  LikeTweet: LikeTweetPayload
  RetweetTweet: RetweetTweetPayload
}
"""
Tweet data
"""
type Tweet implements Node {
  """
  The ID of an object
  """
  id: ID!
  _id: ID
  content: String
  likes: Int
  retweets: Int
  author: User
}
"""
A connection to a list of items.
"""
type TweetConnection {
  """
  Number of items in this connection
  """
  count: Int!
  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int!
  """
  Offset from start
  """
  startCursorOffset: Int!
  """
  Offset till end
  """
  endCursorOffset: Int!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfoExtended!
  """
  A list of edges.
  """
  edges: [TweetEdge]!
}
input TweetCreateInput {
  content: String!
  clientMutationId: String
}
type TweetCreatePayload {
  content: String
  likes: Int
  retweets: Int
  author: User
  error: String
  clientMutationId: String
}
"""
An edge in a connection.
"""
type TweetEdge {
  """
  The item at the end of the edge
  """
  node: Tweet!
  """
  A cursor for use in pagination
  """
  cursor: String!
}
input TweetUpdateInput {
  id: ID!
  like: Boolean
  retweet: Boolean
  clientMutationId: String
}
type TweetUpdatePayload {
  likes: Int
  retweets: Int
  error: String
  clientMutationId: String
}
"""
User data
"""
type User implements Node {
  """
  The ID of an object
  """
  id: ID!
  _id: String
  name: String
  email: String
  active: Boolean
}
type UserAddedPayload {
  userEdge: UserEdge
}
input UserChangePasswordInput {
  oldPassword: String!
  """
  user new password
  """
  password: String!
  clientMutationId: String
}
type UserChangePasswordPayload {
  error: String
  me: User
  clientMutationId: String
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  Number of items in this connection
  """
  count: Int!
  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int!
  """
  Offset from start
  """
  startCursorOffset: Int!
  """
  Offset till end
  """
  endCursorOffset: Int!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfoExtended!
  """
  A list of edges.
  """
  edges: [UserEdge]!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge
  """
  node: User!
  """
  A cursor for use in pagination
  """
  cursor: String!
}
input UserLoginWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}
type UserLoginWithEmailPayload {
  token: String
  error: String
  clientMutationId: String
}
input UserRegisterWithEmailInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}
type UserRegisterWithEmailPayload {
  token: String
  error: String
  clientMutationId: String
}
